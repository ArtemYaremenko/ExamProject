package pro.sky.ExamProject.constans;

import pro.sky.ExamProject.model.Question;

public class QuestionsAndAnswers {

    public static final String QUESTION_1 = "Какие типы данных есть в Java?";
    public static final String QUESTION_2 = "Чем объект отличается от примитивных типов данных?";
    public static final String QUESTION_3 = "Чем отличаются передача параметров по ссылке и по значению?";
    public static final String QUESTION_4 = "Что такое JVM, JDK, JRE?";
    public static final String QUESTION_5 = "Зачем используют JVM?";
    public static final String ANSWER_1 = "В Java есть примитивные типы данных:\n" +
            "byte — целые числа в пределах -128 до 127, весит 1 байт;\n" +
            "short — целые числа в пределах -32768 до 32767, весит 2 байта;\n" +
            "int — целые числа -2147483648 до 2147483647, весит 4 байта;\n" +
            "long — целые числа в пределах 9223372036854775808 до 9223372036854775807, весит 8 байтов;\n" +
            "float — числа с плавающей запятой в пределах -3.4E+38 до 3.4E+38, весит 4 байта;\n" +
            "double — числа с плавающей запятой в пределах -1.7E+308 до 1.7E+308, весит 8 байтов;\n" +
            "char — одиночные символы в UTF-16, весит 2 байта;\n" +
            "boolean значения true/false, весит 1 байт.\n" +
            "И ссылочные типы данных, которые указывают на объекты в куче.";
    public static final String ANSWER_2 = "Первое отличие: количество занимаемой памяти: примитивы занимают очень мало," +
            " ведь они содержат лишь собственное значение, в то время как объекты могут содержать очень и очень много различных значений:" +
            " как примитивов, так и ссылок на другие объекты.\n" +
            " \n" +
            "Второе отличие: Java — это объектно-ориентированный язык, поэтому в ней все работает через взаимодействие между объектами," +
            " и примитивы тут не сильно вписываются (собственно, поэтому Java — это не 100% объектно-ориентированный язык).\n" +
            " \n" +
            "Третье, вытекающее со второго: так как Java ориентирована на взаимодействие между объектами," +
            " у этих объектов есть много различных механизмов для управления. " +
            "Например, конструкторы, методы, исключения (которые работают в первую очередь с объектами), и т.д.\n" +
            " \n" +
            "Собственно, чтобы примитивы могли как-то ввязаться (работать) в этой объектно ориентированной среде" +
            " и были придуманы обертки (wrappers) для примитивных типов (Integer, Character, Double, Boolean...)";
    public static final String ANSWER_3 = "Примитивные поля хранят свое значение: например, если мы задали int i = 9; поле i хранит значение 9. " +
            "Когда у нас есть ссылка на объект, это значит, что мы имеем поле со ссылкой на объект, " +
            "или другими словами — со значением адреса объекта в памяти.\n" +
            " \n" +
            "Cat cat = new Cat();\n" +
            "\n" +
            "Получается, поля со ссылкой на объект тоже хранят значения, значения адреса памяти. " +
            "То есть, cat хранит значение адреса объекта new Cat() в памяти. Когда мы передаем параметр в некоторый метод, " +
            "то происходит копирование его значения.\n" +
            " \n" +
            "В случае с примитивом будет копироваться значение примитива. " +
            "Соответственно, в методе будет вестись работа с копией, при изменении которой оригинал не затронется.\n" +
            " \n" +
            "В случае со ссылочным типом будет копироваться значение адреса памяти, соответственно, адрес будет все тем же, " +
            "как и объект, на который он указывает. \n" +
            "И если мы будем менять объект по этой новой ссылке, он будет изменен и для старой " +
            "(ведь они обе указывают на один и тот же объект).";
    public static final String ANSWER_4 = "JVM — Java Virtual Machine — это виртуальная машина, которая запускает Java байткод, " +
            "предварительно созданный компилятором.\n" +
            " \n" +
            "JRE — Java Runtime Environment — по сути, это среда для запуска java-приложений, которая содержит JVM, " +
            "стандартные библиотеки и другие компоненты для запуска апплетов и приложений, " +
            "написанных на языке программирования Java.\n" +
            " \n" +
            "Другими словами JRE — пакет всего необходимого для запуска скомпилированной Java-программы, " +
            "но при этом не содержащий инструментов и утилит, таких как компиляторы или отладчики для разработки приложений.\n" +
            " \n" +
            "JDK — Java Development Kit — расширенный набор JRE, то есть, среда не только для запуска, " +
            "но и для разработки java-приложений.\n" +
            " \n" +
            "JDK содержит все, что есть в JRE, плюс различные дополнительные инструменты — компиляторы и отладчики, " +
            "которые нужны для создания приложений на Java (также содержит java-доки).";
    public static final String ANSWER_5 = "Java Virtual Machine — это виртуальная машина, " +
            "которая запускает Java байткод, предварительно созданный компилятором.\n" +
            "\n" +
            "То есть, JVM не понимает исходный код Java.\n" +
            " \n" +
            "Поэтому сперва происходит компиляция .java файлов, " +
            "которые после компиляции имеют расширение уже .class и которые и которые представлены в виде " +
            "того самого байт кода, который понимает JVM. \n" +
            " \n" +
            "JVM для каждой OC своя, поэтому получив файлы в байт коде, JVM исполняет его, адаптируя под ОС, " +
            "на которой это происходит.\n" +
            " \n" +
            "Собственно, из-за разных JVM версии JDK (или JRE) отличаются для разных ОС " +
            "(под каждую из них нужна своя JVM).\n" +
            " \n" +
            "Давайте вспомним, как происходит разработка на других языках программирования. " +
            "Вы разрабатываете программу, затем её код компилируется в машинный код для конкретной ОС, " +
            "и после вы можете его запускать. Другими словами, под каждую систему вам нужно писать разные версии программы.\n" +
            " \n" +
            "В то время как на Java, благодаря двойной обработке кода (компиляция и обработка байт кода JVM), " +
            "вы можете пользоваться преимуществами кроссплатформенности. \n" +
            " \n" +
            "Мы создали однажды код, перекомпилировали его в байткод, перенесли его на любую ОС, " +
            "и уже местная JVM и запускает код.\n" +
            " \n" +
            "Это и есть легендарное свойство Java — пишешь однажды, запускаешь где угодно.";
    public static final Question QUESTION_OBJECT_1 = new Question(QUESTION_1, ANSWER_1);
    public static final Question QUESTION_OBJECT_2 = new Question(QUESTION_2, ANSWER_2);
    public static final Question QUESTION_OBJECT_3 = new Question(QUESTION_3, ANSWER_3);
    public static final Question QUESTION_OBJECT_4 = new Question(QUESTION_4, ANSWER_4);
    public static final Question QUESTION_OBJECT_5 = new Question(QUESTION_5, ANSWER_5);

}
